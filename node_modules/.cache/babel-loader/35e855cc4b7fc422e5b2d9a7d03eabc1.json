{"ast":null,"code":"import _classCallCheck from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _objectWithoutProperties from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\src\\\\components\\\\ReusableComponents\\\\MessageComponent\\\\MessageComponent.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { withStyles } from '@material-ui/core/styles';\nvar variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nvar styles1 = function styles1(theme) {\n  return {\n    success: {\n      backgroundColor: green[600]\n    },\n    error: {\n      backgroundColor: theme.palette.error.dark\n    },\n    info: {\n      backgroundColor: theme.palette.primary.dark\n    },\n    warning: {\n      backgroundColor: amber[700]\n    },\n    icon: {\n      fontSize: 20\n    },\n    iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing.unit\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n};\n\nfunction MySnackbarContent(props) {\n  var classes = props.classes,\n      className = props.className,\n      message = props.message,\n      onClose = props.onClose,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"message\", \"onClose\", \"variant\"]);\n\n  var Icon = variantIcon[variant];\n  return React.createElement(SnackbarContent, Object.assign({\n    className: classNames(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: classNames(classes.icon, classes.iconVariant),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), message),\n    action: [React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      className: classes.close,\n      onClick: onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      className: classes.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }))]\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n}\n\nMySnackbarContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired\n};\nvar MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\n\nvar styles2 = function styles2(theme) {\n  return {\n    margin: {\n      margin: theme.spacing.unit\n    }\n  };\n};\n\nvar MessageComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MessageComponent, _Component);\n\n  function MessageComponent(props) {\n    _classCallCheck(this, MessageComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MessageComponent).call(this, props));\n  }\n\n  _createClass(MessageComponent, [{\n    key: \"render\",\n    value: function render() {\n      var classes = this.props.classes;\n      return React.createElement(MySnackbarContentWrapper, {\n        variant: \"warning\",\n        className: classes.margin,\n        message: \"Avalible Users !\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MessageComponent;\n}(Component);\n\nMessageComponent.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles2)(MessageComponent);","map":{"version":3,"sources":["D:\\Front end pro\\Projects1\\ChatApp\\chatApp\\src\\components\\ReusableComponents\\MessageComponent\\MessageComponent.js"],"names":["React","Component","Fragment","PropTypes","classNames","Button","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","green","amber","IconButton","Snackbar","SnackbarContent","WarningIcon","withStyles","variantIcon","success","warning","error","info","styles1","theme","backgroundColor","palette","dark","primary","icon","fontSize","iconVariant","opacity","marginRight","spacing","unit","message","display","alignItems","MySnackbarContent","props","classes","className","onClose","variant","other","Icon","close","propTypes","object","isRequired","string","node","func","oneOf","MySnackbarContentWrapper","styles2","margin","MessageComponent"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,OAAO,EAAEZ,eADO;AAEhBa,EAAAA,OAAO,EAAEJ,WAFO;AAGhBK,EAAAA,KAAK,EAAEb,SAHS;AAIhBc,EAAAA,IAAI,EAAEb;AAJU,CAApB;;AAOA,IAAMc,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK;AAAA,SAAK;AACtBL,IAAAA,OAAO,EAAE;AACLM,MAAAA,eAAe,EAAEd,KAAK,CAAC,GAAD;AADjB,KADa;AAItBU,IAAAA,KAAK,EAAE;AACHI,MAAAA,eAAe,EAAED,KAAK,CAACE,OAAN,CAAcL,KAAd,CAAoBM;AADlC,KAJe;AAOtBL,IAAAA,IAAI,EAAE;AACFG,MAAAA,eAAe,EAAED,KAAK,CAACE,OAAN,CAAcE,OAAd,CAAsBD;AADrC,KAPgB;AAUtBP,IAAAA,OAAO,EAAE;AACLK,MAAAA,eAAe,EAAEb,KAAK,CAAC,GAAD;AADjB,KAVa;AAatBiB,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAE;AADR,KAbgB;AAgBtBC,IAAAA,WAAW,EAAE;AACTC,MAAAA,OAAO,EAAE,GADA;AAETC,MAAAA,WAAW,EAAET,KAAK,CAACU,OAAN,CAAcC;AAFlB,KAhBS;AAoBtBC,IAAAA,OAAO,EAAE;AACLC,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,UAAU,EAAE;AAFP;AApBa,GAAL;AAAA,CAArB;;AA0BA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA,MACtBC,OADsB,GACsCD,KADtC,CACtBC,OADsB;AAAA,MACbC,SADa,GACsCF,KADtC,CACbE,SADa;AAAA,MACFN,OADE,GACsCI,KADtC,CACFJ,OADE;AAAA,MACOO,OADP,GACsCH,KADtC,CACOG,OADP;AAAA,MACgBC,OADhB,GACsCJ,KADtC,CACgBI,OADhB;AAAA,MAC4BC,KAD5B,4BACsCL,KADtC;;AAE9B,MAAMM,IAAI,GAAG5B,WAAW,CAAC0B,OAAD,CAAxB;AAEA,SACI,oBAAC,eAAD;AACI,IAAA,SAAS,EAAEvC,UAAU,CAACoC,OAAO,CAACG,OAAD,CAAR,EAAmBF,SAAnB,CADzB;AAEI,wBAAiB,iBAFrB;AAGI,IAAA,OAAO,EACH;AAAM,MAAA,EAAE,EAAC,iBAAT;AAA2B,MAAA,SAAS,EAAED,OAAO,CAACL,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACN,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAE/B,UAAU,CAACoC,OAAO,CAACZ,IAAT,EAAeY,OAAO,CAACV,WAAvB,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADM,EAEKK,OAFL,CAJR;AASI,IAAA,MAAM,EAAE,CACJ,oBAAC,UAAD;AACI,MAAA,GAAG,EAAC,OADR;AAEI,oBAAW,OAFf;AAGI,MAAA,KAAK,EAAC,SAHV;AAII,MAAA,SAAS,EAAEK,OAAO,CAACM,KAJvB;AAKI,MAAA,OAAO,EAAEJ,OALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOI,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEF,OAAO,CAACZ,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADI;AATZ,KAoBQgB,KApBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAwBH;;AAEDN,iBAAiB,CAACS,SAAlB,GAA8B;AAC1BP,EAAAA,OAAO,EAAErC,SAAS,CAAC6C,MAAV,CAAiBC,UADA;AAE1BR,EAAAA,SAAS,EAAEtC,SAAS,CAAC+C,MAFK;AAG1Bf,EAAAA,OAAO,EAAEhC,SAAS,CAACgD,IAHO;AAI1BT,EAAAA,OAAO,EAAEvC,SAAS,CAACiD,IAJO;AAK1BT,EAAAA,OAAO,EAAExC,SAAS,CAACkD,KAAV,CAAgB,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,MAAhC,CAAhB,EAAyDJ;AALxC,CAA9B;AAQA,IAAMK,wBAAwB,GAAGtC,UAAU,CAACM,OAAD,CAAV,CAAoBgB,iBAApB,CAAjC;;AAEA,IAAMiB,OAAO,GAAG,SAAVA,OAAU,CAAAhC,KAAK;AAAA,SAAK;AACtBiC,IAAAA,MAAM,EAAE;AACJA,MAAAA,MAAM,EAAEjC,KAAK,CAACU,OAAN,CAAcC;AADlB;AADc,GAAL;AAAA,CAArB;;IAMMuB,gB;;;;;AAEF,4BAAYlB,KAAZ,EAAmB;AAAA;;AAAA,yFACTA,KADS;AAElB;;;;6BAEQ;AAAA,UACGC,OADH,GACe,KAAKD,KADpB,CACGC,OADH;AAEL,aACI,oBAAC,wBAAD;AACI,QAAA,OAAO,EAAC,SADZ;AAEI,QAAA,SAAS,EAAEA,OAAO,CAACgB,MAFvB;AAGI,QAAA,OAAO,EAAC,kBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOH;;;;EAf0BvD,S;;AAkB/BwD,gBAAgB,CAACV,SAAjB,GAA6B;AACzBP,EAAAA,OAAO,EAAErC,SAAS,CAAC6C,MAAV,CAAiBC;AADD,CAA7B;AAIA,eAAejC,UAAU,CAACuC,OAAD,CAAV,CAAoBE,gBAApB,CAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport Button from '@material-ui/core/Button';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport green from '@material-ui/core/colors/green';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nconst styles1 = theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.dark,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing.unit,\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n});\r\n\r\nfunction MySnackbarContent(props) {\r\n    const { classes, className, message, onClose, variant, ...other } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={classNames(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n                    {message}\r\n        </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                    key=\"close\"\r\n                    aria-label=\"Close\"\r\n                    color=\"inherit\"\r\n                    className={classes.close}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\nMySnackbarContent.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    className: PropTypes.string,\r\n    message: PropTypes.node,\r\n    onClose: PropTypes.func,\r\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\r\n};\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\r\n\r\nconst styles2 = theme => ({\r\n    margin: {\r\n        margin: theme.spacing.unit,\r\n    },\r\n});\r\n\r\nclass MessageComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <MySnackbarContentWrapper\r\n                variant=\"warning\"\r\n                className={classes.margin}\r\n                message=\"Avalible Users !\"\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nMessageComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles2)(MessageComponent);\r\n"]},"metadata":{},"sourceType":"module"}