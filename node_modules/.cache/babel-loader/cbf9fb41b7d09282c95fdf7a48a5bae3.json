{"ast":null,"code":"import _classCallCheck from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\src\\\\components\\\\AppContainer\\\\AppContainer.js\";\nimport React, { Component, Fragment } from 'react';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport Chatkit from '@pusher/chatkit-client';\nimport ConfigFile from '../../config/config';\nimport ChannelsComponent from \"./ChannelsComponent/ChannelsComponent\";\nimport InputComponent from \"./InputComponent/InputComponent\";\nimport CreateChannel from \"./CreateChannel/CreateChannel\";\nimport ChatComponent from \"./ChatComponent/ChatComponent\";\nimport OnlineUsersComponent from \"./OnlineUsersComponent/OnlineUsersComponent\";\nimport Header from \"./Header/Header\";\n\nvar AppContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AppContainer, _Component);\n\n  function AppContainer(props) {\n    var _this;\n\n    _classCallCheck(this, AppContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppContainer).call(this, props));\n\n    _this.getAllUsers = function () {\n      _this.setState({\n        listOfAllUsers: _this.currentUser.users\n      });\n    };\n\n    _this.getChannels = function () {\n      var newRoomList = [];\n\n      _this.currentUser.getJoinableRooms().then(function (rooms) {\n        _this.setState({\n          channelsList: newRoomList.concat(_this.currentUser.rooms, rooms)\n        });\n      });\n    };\n\n    _this.changeChannel = function (channelId) {\n      var newArr = [];\n\n      if (_this.state.currentChannelId) {\n        _this.currentUser.roomSubscriptions[_this.state.currentChannelId].cancel();\n      }\n\n      _this.setState({\n        currentChannelId: channelId,\n        currentUserId: _this.currentUser.encodedId,\n        currentMessages: []\n      });\n\n      console.log(channelId);\n      console.log(_this.state.currentChannelId);\n\n      if (_this.state.currentMessages.length === 10 && channelId === _this.state.currentChannelId) {\n        newArr = Array.from(_this.state.currentMessages);\n      }\n\n      _this.currentUser.subscribeToRoomMultipart({\n        roomId: channelId,\n        hooks: {\n          onMessage: function onMessage(message) {\n            if (newArr.length === 10) {\n              newArr.shift();\n            }\n\n            newArr.push(message);\n\n            _this.setState({\n              currentMessages: newArr,\n              currentChannelId: channelId\n            });\n\n            var chatComponentScroll = document.getElementsByClassName(\"ChatComponent-root\");\n            chatComponentScroll[0].scrollTop += 1000;\n          }\n        },\n        messageLimit: 10\n      });\n    };\n\n    _this.addChannel = function (event, name) {\n      _this.currentUser.createRoom({\n        name: name\n      }).then(function (room) {\n        _this.getChannels();\n\n        _this.changeChannel(room.id);\n      }).catch(function (error) {\n        console.error(\"error:\", error);\n      });\n    };\n\n    _this.sendMessage = function (event, message) {\n      _this.currentUser.sendSimpleMessage({\n        text: message,\n        roomId: _this.state.currentChannelId\n      });\n    };\n\n    _this.state = {\n      channelsList: [],\n      currentChannelId: 0,\n      currentUserId: \"\",\n      currentMessages: [],\n      listOfAllUsers: []\n    };\n    return _this;\n  }\n\n  _createClass(AppContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var tokenProvider = new Chatkit.TokenProvider({\n        url: ConfigFile.tokenEndpoint\n      });\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: ConfigFile.InstanceLocator,\n        userId: \"\".concat(this.props.match.params.user),\n        tokenProvider: tokenProvider\n      });\n      chatManager.connect().then(function (currentUser) {\n        _this2.currentUser = currentUser;\n\n        _this2.getAllUsers();\n\n        _this2.getChannels();\n\n        _this2.changeChannel();\n      }).catch(function (error) {\n        console.error(\"error:\", error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var inputStyle = {\n        marginLeft: '10px'\n      };\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Header, {\n        currentUserId: this.state.currentUserId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        wrap: \"nowrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(ChannelsComponent, {\n        changeChannel: this.changeChannel,\n        currentChannelId: this.state.currentChannelId,\n        channelsList: this.state.channelsList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(ChatComponent, {\n        currentMessages: this.state.currentMessages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }))), React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        wrap: \"nowrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(CreateChannel, {\n        addChannel: this.addChannel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        style: inputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(InputComponent, {\n        isNoChannel: this.state.currentChannelId,\n        sendMessage: this.sendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }))), React.createElement(OnlineUsersComponent, {\n        listOfAllUsers: this.state.listOfAllUsers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AppContainer;\n}(Component);\n\nexport default AppContainer;","map":{"version":3,"sources":["D:\\Front end pro\\Projects1\\ChatApp\\chatApp\\src\\components\\AppContainer\\AppContainer.js"],"names":["React","Component","Fragment","Grid","Chatkit","ConfigFile","ChannelsComponent","InputComponent","CreateChannel","ChatComponent","OnlineUsersComponent","Header","AppContainer","props","getAllUsers","setState","listOfAllUsers","currentUser","users","getChannels","newRoomList","getJoinableRooms","then","rooms","channelsList","concat","changeChannel","channelId","newArr","state","currentChannelId","roomSubscriptions","cancel","currentUserId","encodedId","currentMessages","console","log","length","Array","from","subscribeToRoomMultipart","roomId","hooks","onMessage","message","shift","push","chatComponentScroll","document","getElementsByClassName","scrollTop","messageLimit","addChannel","event","name","createRoom","room","id","catch","error","sendMessage","sendSimpleMessage","text","tokenProvider","TokenProvider","url","tokenEndpoint","chatManager","ChatManager","instanceLocator","InstanceLocator","userId","match","params","user","connect","inputStyle","marginLeft"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport Grid from '@material-ui/core/Grid/Grid';\r\nimport Chatkit from '@pusher/chatkit-client';\r\nimport ConfigFile from '../../config/config';\r\nimport ChannelsComponent from \"./ChannelsComponent/ChannelsComponent\";\r\nimport InputComponent from \"./InputComponent/InputComponent\";\r\nimport CreateChannel from \"./CreateChannel/CreateChannel\";\r\nimport ChatComponent from \"./ChatComponent/ChatComponent\";\r\nimport OnlineUsersComponent from \"./OnlineUsersComponent/OnlineUsersComponent\";\r\nimport Header from \"./Header/Header\";\r\n\r\n\r\nclass AppContainer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            channelsList: [],\r\n            currentChannelId: 0,\r\n            currentUserId: \"\",\r\n            currentMessages: [],\r\n            listOfAllUsers: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const tokenProvider = new Chatkit.TokenProvider({\r\n            url: ConfigFile.tokenEndpoint\r\n        });\r\n\r\n        const chatManager = new Chatkit.ChatManager({\r\n            instanceLocator: ConfigFile.InstanceLocator,\r\n            userId: `${this.props.match.params.user}`,\r\n            tokenProvider: tokenProvider\r\n        });\r\n\r\n        chatManager\r\n            .connect()\r\n            .then(currentUser => {\r\n                this.currentUser = currentUser;\r\n                this.getAllUsers();\r\n                this.getChannels();\r\n                this.changeChannel();\r\n            })\r\n            .catch(error => {\r\n                console.error(\"error:\", error);\r\n            });\r\n    }\r\n\r\n    getAllUsers = () => {\r\n        this.setState({listOfAllUsers: this.currentUser.users})\r\n    };\r\n\r\n    getChannels = () => {\r\n        let newRoomList = [];\r\n        this.currentUser.getJoinableRooms()\r\n            .then((rooms)=>{\r\n                this.setState({channelsList: newRoomList.concat(this.currentUser.rooms, rooms),})\r\n            });\r\n    };\r\n\r\n    changeChannel = (channelId) => {\r\n        let newArr = [];\r\n\r\n        if (this.state.currentChannelId){\r\n            this.currentUser.roomSubscriptions[this.state.currentChannelId].cancel();\r\n        }\r\n\r\n        this.setState({\r\n            currentChannelId: channelId,\r\n            currentUserId: this.currentUser.encodedId,\r\n            currentMessages: [],\r\n        });\r\n\r\n        console.log(channelId);\r\n        console.log(this.state.currentChannelId);\r\n\r\n        if (this.state.currentMessages.length === 10 && channelId === this.state.currentChannelId){\r\n            newArr = Array.from(this.state.currentMessages);\r\n        }\r\n\r\n            this.currentUser.subscribeToRoomMultipart({\r\n                roomId: channelId,\r\n                hooks: {\r\n                    onMessage: message => {\r\n                        if (newArr.length === 10) {\r\n                            newArr.shift();\r\n                        }\r\n                        newArr.push(message);\r\n                        this.setState({\r\n                            currentMessages: newArr,\r\n                            currentChannelId: channelId,\r\n                        });\r\n                        let chatComponentScroll = document.getElementsByClassName(\"ChatComponent-root\");\r\n                        chatComponentScroll[0].scrollTop += 1000;\r\n                    }\r\n                },\r\n                messageLimit: 10,\r\n            });\r\n    };\r\n\r\n    addChannel = (event, name) => {\r\n        this.currentUser.createRoom({\r\n            name,\r\n        })\r\n            .then((room)=>{\r\n                this.getChannels();\r\n                this.changeChannel(room.id);\r\n            })\r\n            .catch(error => {\r\n            console.error(\"error:\", error);\r\n        });\r\n    };\r\n\r\n    sendMessage = (event, message) => {\r\n        this.currentUser.sendSimpleMessage({\r\n            text: message,\r\n            roomId: this.state.currentChannelId\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let inputStyle = {\r\n            marginLeft: '10px',\r\n        };\r\n\r\n        return (\r\n            <Fragment>\r\n                <Header currentUserId={this.state.currentUserId}/>\r\n                <Grid container direction={\"row\"} wrap={\"nowrap\"}>\r\n                    <Grid item><ChannelsComponent changeChannel={this.changeChannel} currentChannelId={this.state.currentChannelId} channelsList={this.state.channelsList}/></Grid>\r\n                    <Grid item xs={12}><ChatComponent currentMessages={this.state.currentMessages}/></Grid>\r\n                </Grid>\r\n                <Grid container direction={\"row\"} alignContent={\"center\"} alignItems={\"center\"} wrap={\"nowrap\"}>\r\n                    <Grid item><CreateChannel addChannel={this.addChannel}/></Grid>\r\n                    <Grid item xs={12} style={inputStyle}><InputComponent isNoChannel={this.state.currentChannelId} sendMessage={this.sendMessage}/></Grid>\r\n                </Grid>\r\n                <OnlineUsersComponent listOfAllUsers={this.state.listOfAllUsers}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppContainer;\r\n"]},"metadata":{},"sourceType":"module"}