{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Front end pro\\\\Projects1\\\\ChatApp\\\\chatApp\\\\src\\\\components\\\\AppContainer\\\\AppContainer.js\";\nimport React, { Component, Fragment } from 'react';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport Chatkit from '@pusher/chatkit-client';\nimport ConfigFile from '../../config/config';\nimport ChannelsComponent from \"./ChannelsComponent/ChannelsComponent\";\nimport InputComponent from \"./InputComponent/InputComponent\";\nimport CreateChannel from \"./CreateChannel/CreateChannel\";\nimport ChatComponent from \"./ChatComponent/ChatComponent\";\n\nvar AppContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AppContainer, _Component);\n\n  function AppContainer(props) {\n    var _this;\n\n    _classCallCheck(this, AppContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppContainer).call(this, props));\n\n    _this.changeChannel = function (event) {\n      _this.state.channelsList.forEach(function (value) {\n        if (event.target.value === value.name) {\n          _this.setState({\n            currentChannelId: value.id\n          });\n        }\n      });\n    };\n\n    _this.state = {\n      channelsList: [],\n      currentChannelId: \"\",\n      currentUserId: \"\",\n      currentMessages: []\n    };\n    return _this;\n  }\n\n  _createClass(AppContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var newMessages = [1];\n      newMessages.push(2);\n      var tokenProvider = new Chatkit.TokenProvider({\n        url: ConfigFile.tokenEndpoint\n      });\n      var chatManager = new Chatkit.ChatManager({\n        instanceLocator: ConfigFile.InstanceLocator,\n        userId: \"User1\",\n        tokenProvider: tokenProvider\n      });\n      chatManager.connect().then(function (currentUser) {\n        currentUser.subscribeToRoomMultipart({\n          roomId: currentUser.rooms[0].id,\n          hooks: {\n            onMessage: function onMessage(message) {\n              _this2.setState({\n                channelsList: currentUser.rooms,\n                currentChannelId: currentUser.rooms[0].id,\n                currentUserId: currentUser.encodedId,\n                currentMessages: [].concat(_toConsumableArray(_this2.state.currentMessages), [message]),\n                currentChatManager: chatManager\n              });\n            }\n          },\n          messageLimit: 10\n        });\n      }).catch(function (error) {\n        console.error(\"error:\", error);\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevState, prevProps) {\n      var _this3 = this;\n\n      if (this.state.currentChannelId !== prevState.currentChannelId) {\n        this.state.currentChatManager.connect().then(function (currentUser) {\n          currentUser.subscribeToRoomMultipart({\n            roomId: currentUser.rooms[0].id,\n            hooks: {\n              onMessage: function onMessage(message) {\n                _this3.setState({\n                  channelsList: currentUser.rooms,\n                  currentChannelId: currentUser.rooms[0].id,\n                  currentUserId: currentUser.encodedId,\n                  currentMessages: [].concat(_toConsumableArray(_this3.state.currentMessages), [message]),\n                  currentChatManager: chatManager\n                });\n              }\n            },\n            messageLimit: 10\n          });\n        }).catch(function (error) {\n          console.error(\"error:\", error);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var inputStyle = {\n        marginLeft: '10px'\n      };\n      console.log(this.state.currentMessages);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        wrap: \"nowrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(ChannelsComponent, {\n        channelsList: this.state.channelsList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(ChatComponent, {\n        currentMessages: this.state.currentMessages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }))), React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        wrap: \"nowrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(CreateChannel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 10,\n        style: inputStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(InputComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return AppContainer;\n}(Component);\n\nexport default AppContainer;","map":{"version":3,"sources":["D:\\Front end pro\\Projects1\\ChatApp\\chatApp\\src\\components\\AppContainer\\AppContainer.js"],"names":["React","Component","Fragment","Grid","Chatkit","ConfigFile","ChannelsComponent","InputComponent","CreateChannel","ChatComponent","AppContainer","props","changeChannel","event","state","channelsList","forEach","value","target","name","setState","currentChannelId","id","currentUserId","currentMessages","newMessages","push","tokenProvider","TokenProvider","url","tokenEndpoint","chatManager","ChatManager","instanceLocator","InstanceLocator","userId","connect","then","currentUser","subscribeToRoomMultipart","roomId","rooms","hooks","onMessage","message","encodedId","currentChatManager","messageLimit","catch","error","console","prevState","prevProps","inputStyle","marginLeft","log"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport Grid from '@material-ui/core/Grid/Grid';\r\nimport Chatkit from '@pusher/chatkit-client';\r\nimport ConfigFile from '../../config/config';\r\nimport ChannelsComponent from \"./ChannelsComponent/ChannelsComponent\";\r\nimport InputComponent from \"./InputComponent/InputComponent\";\r\nimport CreateChannel from \"./CreateChannel/CreateChannel\";\r\nimport ChatComponent from \"./ChatComponent/ChatComponent\";\r\n\r\n\r\nclass AppContainer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            channelsList: [],\r\n            currentChannelId: \"\",\r\n            currentUserId: \"\",\r\n            currentMessages: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let newMessages = [1];\r\n        newMessages.push(2);\r\n        const tokenProvider = new Chatkit.TokenProvider({\r\n            url: ConfigFile.tokenEndpoint\r\n        });\r\n\r\n        const chatManager = new Chatkit.ChatManager({\r\n            instanceLocator: ConfigFile.InstanceLocator,\r\n            userId: \"User1\",\r\n            tokenProvider: tokenProvider\r\n        });\r\n\r\n        chatManager\r\n            .connect()\r\n            .then(currentUser => {\r\n                currentUser.subscribeToRoomMultipart({\r\n                    roomId: currentUser.rooms[0].id,\r\n                    hooks: {\r\n                        onMessage: message => {\r\n                            this.setState({\r\n                                channelsList: currentUser.rooms,\r\n                                currentChannelId: currentUser.rooms[0].id,\r\n                                currentUserId: currentUser.encodedId,\r\n                                currentMessages: [...this.state.currentMessages, message],\r\n                                currentChatManager: chatManager,\r\n                            })\r\n                        }\r\n                    },\r\n                    messageLimit: 10,\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.error(\"error:\", error);\r\n            });\r\n    }\r\n\r\n    componentDidUpdate(prevState, prevProps) {\r\n        if (this.state.currentChannelId !== prevState.currentChannelId) {\r\n            this.state.currentChatManager\r\n                .connect()\r\n                .then(currentUser => {\r\n                    currentUser.subscribeToRoomMultipart({\r\n                        roomId: currentUser.rooms[0].id,\r\n                        hooks: {\r\n                            onMessage: message => {\r\n                                this.setState({\r\n                                    channelsList: currentUser.rooms,\r\n                                    currentChannelId: currentUser.rooms[0].id,\r\n                                    currentUserId: currentUser.encodedId,\r\n                                    currentMessages: [...this.state.currentMessages, message],\r\n                                    currentChatManager: chatManager,\r\n                                })\r\n                            }\r\n                        },\r\n                        messageLimit: 10,\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    console.error(\"error:\", error);\r\n                });\r\n        }\r\n    }\r\n\r\n    changeChannel = (event) => {\r\n        this.state.channelsList.forEach((value)=>{\r\n            if(event.target.value === value.name){\r\n                this.setState({\r\n                    currentChannelId: value.id\r\n                })\r\n            }\r\n        })\r\n    };\r\n\r\n    render() {\r\n        let inputStyle = {\r\n            marginLeft: '10px',\r\n        };\r\n        console.log(this.state.currentMessages);\r\n        return (\r\n            <Fragment>\r\n                <Grid container direction={\"row\"} wrap={\"nowrap\"}>\r\n                    <Grid item><ChannelsComponent channelsList={this.state.channelsList}/></Grid>\r\n                    <Grid item xs={10}><ChatComponent currentMessages={this.state.currentMessages}/></Grid>\r\n                </Grid>\r\n                <Grid container direction={\"row\"} alignContent={\"center\"} alignItems={\"center\"} wrap={\"nowrap\"}>\r\n                    <Grid item><CreateChannel/></Grid>\r\n                    <Grid item xs={10} style={inputStyle}><InputComponent/></Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppContainer;\r\n"]},"metadata":{},"sourceType":"module"}